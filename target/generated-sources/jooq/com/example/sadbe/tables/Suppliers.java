/*
 * This file is generated by jOOQ.
 */
package com.example.sadbe.tables;


import com.example.sadbe.Keys;
import com.example.sadbe.Sad;
import com.example.sadbe.tables.records.SuppliersRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Suppliers extends TableImpl<SuppliersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>sad.suppliers</code>
     */
    public static final Suppliers SUPPLIERS = new Suppliers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SuppliersRecord> getRecordType() {
        return SuppliersRecord.class;
    }

    /**
     * The column <code>sad.suppliers.id</code>.
     */
    public final TableField<SuppliersRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>sad.suppliers.entity_id</code>.
     */
    public final TableField<SuppliersRecord, UUID> ENTITY_ID = createField(DSL.name("entity_id"), SQLDataType.UUID.defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>sad.suppliers.name</code>.
     */
    public final TableField<SuppliersRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>sad.suppliers.address</code>.
     */
    public final TableField<SuppliersRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>sad.suppliers.phone</code>.
     */
    public final TableField<SuppliersRecord, String> PHONE = createField(DSL.name("phone"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>sad.suppliers.datetime_of_creation</code>.
     */
    public final TableField<SuppliersRecord, LocalDateTime> DATETIME_OF_CREATION = createField(DSL.name("datetime_of_creation"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>sad.suppliers.datetime_of_delete</code>.
     */
    public final TableField<SuppliersRecord, LocalDateTime> DATETIME_OF_DELETE = createField(DSL.name("datetime_of_delete"), SQLDataType.LOCALDATETIME(6), this, "");

    private Suppliers(Name alias, Table<SuppliersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Suppliers(Name alias, Table<SuppliersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>sad.suppliers</code> table reference
     */
    public Suppliers(String alias) {
        this(DSL.name(alias), SUPPLIERS);
    }

    /**
     * Create an aliased <code>sad.suppliers</code> table reference
     */
    public Suppliers(Name alias) {
        this(alias, SUPPLIERS);
    }

    /**
     * Create a <code>sad.suppliers</code> table reference
     */
    public Suppliers() {
        this(DSL.name("suppliers"), null);
    }

    public <O extends Record> Suppliers(Table<O> child, ForeignKey<O, SuppliersRecord> key) {
        super(child, key, SUPPLIERS);
    }

    @Override
    public Schema getSchema() {
        return Sad.SAD;
    }

    @Override
    public UniqueKey<SuppliersRecord> getPrimaryKey() {
        return Keys.SUPPLIERS_PKEY;
    }

    @Override
    public List<UniqueKey<SuppliersRecord>> getKeys() {
        return Arrays.<UniqueKey<SuppliersRecord>>asList(Keys.SUPPLIERS_PKEY);
    }

    @Override
    public Suppliers as(String alias) {
        return new Suppliers(DSL.name(alias), this);
    }

    @Override
    public Suppliers as(Name alias) {
        return new Suppliers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Suppliers rename(String name) {
        return new Suppliers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Suppliers rename(Name name) {
        return new Suppliers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, UUID, String, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
