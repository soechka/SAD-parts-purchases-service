{"ast":null,"code":"import MessageService from \"@/services/MessageService\";\nimport axios from \"axios\";\nexport default {\n  name: \"AuthorizationPage\",\n  data() {\n    document.title = \"SAD Auth\";\n    var timer = this.$cookie.get('timer');\n    if (timer > 0) {\n      this.startTimer();\n    }\n    return {\n      login: \"\",\n      password: \"\",\n      isDisabled: timer > 0,\n      passwordState: null,\n      usernameState: null,\n      maxTryCount: 3,\n      timeOut: 180,\n      countTry: 0,\n      timer: timer,\n      user: {\n        accessToken: \"\"\n      },\n      endPoint: \"/sad/api/login\"\n    };\n  },\n  props: {\n    connection: {\n      type: String,\n      required: true\n    },\n    messageService: {\n      type: MessageService,\n      required: true\n    }\n  },\n  methods: {\n    tryLogIn() {\n      if (this.countTry < this.maxTryCount) {\n        this.countTry++;\n        this.isDisabled = true;\n        this.messageService.show(\"Авторизация\", \"Попытка авторизации\");\n        // this.isDisabled = false; \n        // this.$emit(\"authorized\", {\n        //   accessToken: \"dfd\",\n        //   username: \"Николай Смирнов\",\n        //   // roles: [\"ROLE_ADMIN\"]\n        //   roles: [\"ROLE_USER\"]\n        // });\n        axios.defaults.withCredentials = true;\n        let config = {\n          withCredentials: true,\n          header: {\n            'Content-Type': 'application/x-www-form-urlencoded'\n          }\n        };\n        let data = new FormData();\n        data.append('username', this.login);\n        data.append('password', this.password);\n        axios.post(this.endPoint, data, config).then(response => {\n          this.messageService.show(\"Авторизация\", this.login + \" успешно авторизован\");\n          let data = {\n            username: this.login,\n            isAdmin: response.data.isAdmin\n          };\n          console.log(\"userdata\", data);\n          this.login = \"\";\n          this.password = \"\";\n          this.isDisabled = false;\n          console.log(response);\n          this.countTry = 0;\n          this.$emit(\"authorized\", data);\n        }).catch(err => {\n          this.usernameState = false;\n          this.passwordState = false;\n          this.messageService.showError(err.message);\n          this.isDisabled = false;\n        });\n      } else {\n        this.isDisabled = true;\n        this.timer = this.timeOut;\n        this.startTimer();\n      }\n    },\n    startTimer() {\n      var timer = setInterval(() => {\n        if (this.timer > 0) {\n          this.timer--;\n          this.$cookie.set('timer', this.timer, \"{0}s\".f(this.timer));\n        } else {\n          this.countTry = 0;\n          this.isDisabled = false;\n          clearTimeout(timer);\n        }\n      }, 1000);\n    }\n  }\n};","map":{"version":3,"names":["MessageService","axios","name","data","document","title","timer","$cookie","get","startTimer","login","password","isDisabled","passwordState","usernameState","maxTryCount","timeOut","countTry","user","accessToken","endPoint","props","connection","type","String","required","messageService","methods","tryLogIn","show","defaults","withCredentials","config","header","FormData","append","post","then","response","username","isAdmin","console","log","$emit","catch","err","showError","message","setInterval","set","f","clearTimeout"],"sources":["src/pages/AuthorizationPage.vue"],"sourcesContent":["<template>\r\n  <b-container fluid=\"sm\">\r\n    <b-row align-h=\"center\" align-v=\"center\">\r\n      <b-col col md=\"7\" lg=\"5\" center>\r\n        <b-card deck>\r\n          <b-form-group label=\"Авторизация\" label-size=\"lg\" label-class=\"font-weight-bold pt-0\" class=\"mb-0\">\r\n            <b-form-group label=\"Логин\" label-for=\"login\" label-align=\"left\" invalid-feedback=\"Неверный логин\"\r\n              :state=\"usernameState\">\r\n              <b-form-input id=\"login\" trim :disabled=\"isDisabled\" :state=\"usernameState\" v-model=\"login\"></b-form-input>\r\n            </b-form-group>\r\n\r\n            <b-form-group label=\"Пароль\" label-for=\"password\" label-align=\"left\" invalid-feedback=\"Неверный пароль\"\r\n              :state=\"passwordState\">\r\n              <b-form-input id=\"password\" :disabled=\"isDisabled\" :state=\"passwordState\" v-model=\"password\"\r\n                type=\"password\"></b-form-input>\r\n            </b-form-group>\r\n\r\n            <b-button :disabled=\"isDisabled\" type=\"submit\" variant=\"primary\" @click=\"tryLogIn\">Войти</b-button>\r\n          </b-form-group>\r\n          <div v-if=\"this.timer > 0\">\r\n            <p>Вы исчерпали количество попыток на авторизацию</p>\r\n            <a>Времени до следующей попытки осталось {{ timer / 60 >> 0 }}:{{ timer % 60 < 10 ? \"0\" + String(timer % 60) :\r\n              timer % 60 }}</a>\r\n          </div>\r\n        </b-card>\r\n      </b-col>\r\n    </b-row>\r\n  </b-container>\r\n</template>\r\n\r\n<script>\r\nimport MessageService from \"@/services/MessageService\";\r\nimport axios from \"axios\"\r\n\r\nexport default {\r\n  name: \"AuthorizationPage\",\r\n  data() {\r\n    document.title = \"SAD Auth\";\r\n\r\n    var timer = this.$cookie.get('timer');\r\n    if (timer > 0) {\r\n      this.startTimer();\r\n    }\r\n    return {\r\n      login: \"\",\r\n      password: \"\",\r\n      isDisabled: timer > 0,\r\n      passwordState: null,\r\n      usernameState: null,\r\n      maxTryCount: 3,\r\n      timeOut: 180,\r\n      countTry: 0,\r\n      timer: timer,\r\n      user: {\r\n        accessToken: \"\"\r\n      },\r\n      endPoint: \"/sad/api/login\"\r\n    }\r\n  },\r\n  props: {\r\n    connection: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    messageService: {\r\n      type: MessageService,\r\n      required: true\r\n    }\r\n\r\n  },\r\n  methods: {\r\n    tryLogIn() {\r\n      if (this.countTry < this.maxTryCount) {\r\n\r\n        this.countTry++;\r\n        this.isDisabled = true;\r\n        this.messageService.show(\"Авторизация\", \"Попытка авторизации\")\r\n        // this.isDisabled = false; \r\n        // this.$emit(\"authorized\", {\r\n        //   accessToken: \"dfd\",\r\n        //   username: \"Николай Смирнов\",\r\n        //   // roles: [\"ROLE_ADMIN\"]\r\n        //   roles: [\"ROLE_USER\"]\r\n        // });\r\n        axios.defaults.withCredentials = true;\r\n        let config = {\r\n          withCredentials: true,\r\n          header: {\r\n            'Content-Type': 'application/x-www-form-urlencoded'\r\n          }\r\n        };\r\n        let data = new FormData();\r\n        data.append('username', this.login);\r\n        data.append('password', this.password);\r\n\r\n        axios.post(this.endPoint, data, config).then(response => {\r\n          this.messageService.show(\"Авторизация\", this.login + \" успешно авторизован\")\r\n          let data = {\r\n            username: this.login,\r\n            isAdmin : response.data.isAdmin\r\n          }\r\n          console.log(\"userdata\", data);\r\n          this.login = \"\";\r\n          this.password = \"\";\r\n          this.isDisabled = false;\r\n          console.log(response);\r\n          this.countTry = 0;\r\n          this.$emit(\"authorized\", data);\r\n        }).catch(err => {\r\n          this.usernameState = false;\r\n          this.passwordState = false;\r\n          this.messageService.showError(err.message);\r\n          this.isDisabled = false;\r\n        });\r\n      }\r\n      else {\r\n        this.isDisabled = true;\r\n        this.timer = this.timeOut;\r\n        this.startTimer();\r\n      }\r\n    },\r\n    startTimer() {\r\n      var timer = setInterval(\r\n        () => {\r\n          if (this.timer > 0) {\r\n            this.timer--;\r\n            this.$cookie.set('timer', this.timer, \"{0}s\".f(this.timer));\r\n          }\r\n          else {\r\n            this.countTry = 0;\r\n            this.isDisabled = false;\r\n            clearTimeout(timer);\r\n          }\r\n        },\r\n        1000\r\n      );\r\n    }\r\n  }\r\n}\r\n</script>\r\n<style></style>"],"mappings":"AA+BA,OAAAA,cAAA;AACA,OAAAC,KAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACAC,QAAA,CAAAC,KAAA;IAEA,IAAAC,KAAA,QAAAC,OAAA,CAAAC,GAAA;IACA,IAAAF,KAAA;MACA,KAAAG,UAAA;IACA;IACA;MACAC,KAAA;MACAC,QAAA;MACAC,UAAA,EAAAN,KAAA;MACAO,aAAA;MACAC,aAAA;MACAC,WAAA;MACAC,OAAA;MACAC,QAAA;MACAX,KAAA,EAAAA,KAAA;MACAY,IAAA;QACAC,WAAA;MACA;MACAC,QAAA;IACA;EACA;EACAC,KAAA;IACAC,UAAA;MACAC,IAAA,EAAAC,MAAA;MACAC,QAAA;IACA;IACAC,cAAA;MACAH,IAAA,EAAAvB,cAAA;MACAyB,QAAA;IACA;EAEA;EACAE,OAAA;IACAC,SAAA;MACA,SAAAX,QAAA,QAAAF,WAAA;QAEA,KAAAE,QAAA;QACA,KAAAL,UAAA;QACA,KAAAc,cAAA,CAAAG,IAAA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA5B,KAAA,CAAA6B,QAAA,CAAAC,eAAA;QACA,IAAAC,MAAA;UACAD,eAAA;UACAE,MAAA;YACA;UACA;QACA;QACA,IAAA9B,IAAA,OAAA+B,QAAA;QACA/B,IAAA,CAAAgC,MAAA,kBAAAzB,KAAA;QACAP,IAAA,CAAAgC,MAAA,kBAAAxB,QAAA;QAEAV,KAAA,CAAAmC,IAAA,MAAAhB,QAAA,EAAAjB,IAAA,EAAA6B,MAAA,EAAAK,IAAA,CAAAC,QAAA;UACA,KAAAZ,cAAA,CAAAG,IAAA,qBAAAnB,KAAA;UACA,IAAAP,IAAA;YACAoC,QAAA,OAAA7B,KAAA;YACA8B,OAAA,EAAAF,QAAA,CAAAnC,IAAA,CAAAqC;UACA;UACAC,OAAA,CAAAC,GAAA,aAAAvC,IAAA;UACA,KAAAO,KAAA;UACA,KAAAC,QAAA;UACA,KAAAC,UAAA;UACA6B,OAAA,CAAAC,GAAA,CAAAJ,QAAA;UACA,KAAArB,QAAA;UACA,KAAA0B,KAAA,eAAAxC,IAAA;QACA,GAAAyC,KAAA,CAAAC,GAAA;UACA,KAAA/B,aAAA;UACA,KAAAD,aAAA;UACA,KAAAa,cAAA,CAAAoB,SAAA,CAAAD,GAAA,CAAAE,OAAA;UACA,KAAAnC,UAAA;QACA;MACA,OACA;QACA,KAAAA,UAAA;QACA,KAAAN,KAAA,QAAAU,OAAA;QACA,KAAAP,UAAA;MACA;IACA;IACAA,WAAA;MACA,IAAAH,KAAA,GAAA0C,WAAA,CACA;QACA,SAAA1C,KAAA;UACA,KAAAA,KAAA;UACA,KAAAC,OAAA,CAAA0C,GAAA,eAAA3C,KAAA,SAAA4C,CAAA,MAAA5C,KAAA;QACA,OACA;UACA,KAAAW,QAAA;UACA,KAAAL,UAAA;UACAuC,YAAA,CAAA7C,KAAA;QACA;MACA,GACA,KACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}